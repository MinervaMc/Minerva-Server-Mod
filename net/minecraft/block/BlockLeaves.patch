--- net/minecraft/net/minecraft/block/BlockLeaves.java
+++ net/minecraft/net/minecraft/block/BlockLeaves.java
@@ -209,3 +209,208 @@
 
     public abstract BlockPlanks.EnumType getWoodType(int meta);
 }
+/*
+package net.minecraft.block;
+
+import java.util.Random;
+import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.PropertyBool;
+import net.minecraft.block.state.IBlockState;
+import net.minecraft.creativetab.CreativeTabs;
+import net.minecraft.init.Blocks;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemStack;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.World;
+
+public abstract class BlockLeaves extends Block {
+    public static final PropertyBool DECAYABLE = PropertyBool.create("decayable");
+    public static final PropertyBool CHECK_DECAY = PropertyBool.create("check_decay");
+    protected boolean leavesFancy;
+    private byte[][][] surroundings;
+
+    public BlockLeaves() {
+        super(Material.LEAVES);
+        this.setTickRandomly(true);
+        this.setCreativeTab(CreativeTabs.DECORATIONS);
+        this.setHardness(0.2F);
+        this.setLightOpacity(1);
+        this.setSoundType(SoundType.PLANT);
+    }
+
+    **
+     * Called serverside after this block is replaced with another in Chunk, but before the Tile Entity is updated
+     *
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        int x = pos.getX();
+        int y = pos.getY();
+        int z = pos.getZ();
+
+        if (worldIn.isAreaLoaded(new BlockPos(x - 2, y - 2, z - 2), new BlockPos(x + 2, y + 2, z + 2))) {
+            for (int dx = -1; dx <= 1; ++dx) {
+                for (int dy = -1; dy <= 1; ++dy) {
+                    for (int dz = -1; dz <= 1; ++dz) {
+                        BlockPos blockpos = pos.add(dx, dy, dz);
+                        IBlockState iblockstate = worldIn.getBlockState(blockpos);
+
+                        if (iblockstate.getMaterial() == Material.LEAVES && !((Boolean)iblockstate.getValue(CHECK_DECAY)).booleanValue()) {
+                            worldIn.setBlockState(blockpos, iblockstate.withProperty(CHECK_DECAY, Boolean.valueOf(true)), 4);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
+            if (((Boolean)state.getValue(CHECK_DECAY)).booleanValue() && ((Boolean)state.getValue(DECAYABLE)).booleanValue()) {
+                int x = pos.getX();
+                int y = pos.getY();
+                int z = pos.getZ();
+
+                if (this.surroundings == null) {
+                    this.surroundings = new byte[11][11][11];
+                }
+
+                if (worldIn.isAreaLoaded(new BlockPos(x - 5, y - 5, z - 5), new BlockPos(x + 5, y + 5, z + 5))) {
+                    BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+
+                    for (byte dx = -4; dx <= 4; ++dx) {
+                        for (byte dy = -4; dy <= 4; ++dy) {
+                            for (byte dz = -4; dz <= 4; ++dz) {
+                                IBlockState iblockstate = worldIn.getBlockState(blockpos$mutableblockpos.setPos(x + dx, y + dy, z + dz));
+                                Block block = iblockstate.getBlock();
+
+                                if (block != Blocks.LOG && block != Blocks.LOG2) {
+                                    if (iblockstate.getMaterial() == Material.LEAVES) {
+                                        this.surroundings[dy + 5][dy + 5][dz + 5] = -2;
+                                    } else {
+                                        this.surroundings[dy + 5][dy + 5][dz + 5] = -1;
+                                    }
+                                } else {
+                                    this.surroundings[dy + 5][dy + 5][dz + 5] = 0;
+                                }
+                            }
+                        }
+                    }
+
+                    for (byte s = 1; s <= 4; ++s) {
+                        for (byte dx = -4; dx <= 4; ++dx) {
+                            for (byte dy = -4; dy <= 4; ++dy) {
+                                for (byte dz = -4; dz <= 4; ++dz) {
+                                    if (this.surroundings[dx + 5][dy + 5][dz + 5] == s - 1) {
+                                        if (this.surroundings[dx + 5 - 1][dy + 5][dz + 5] == -2) {
+                                            this.surroundings[dx + 5 - 1][dy + 5][dz + 5] = s;
+                                        }
+
+                                        if (this.surroundings[dx + 5 + 1][dy + 5][dz + 5] == -2) {
+                                            this.surroundings[dx + 5 + 1][dy + 5][dz + 5] = s;
+                                        }
+
+                                        if (this.surroundings[dx + 5][dy + 5 - 1][dz + 5] == -2) {
+                                            this.surroundings[dx + 5][dy + 5 - 1][dz + 5] = s;
+                                        }
+
+                                        if (this.surroundings[dx + 5][dy + 5 + 1][dz + 5] == -2) {
+                                            this.surroundings[dx + 5][dy + 5 + 1][dz + 5] = s;
+                                        }
+
+                                        if (this.surroundings[dx + 5][dy + 5][dz + 5 - 1] == -2) {
+                                            this.surroundings[dx + 5][dy + 5][dz + 5 - 1] = s;
+                                        }
+
+                                        if (this.surroundings[dx + 5][dy + 5][dz + 5 + 1] == -2) {
+                                            this.surroundings[dx + 5][dy + 5][dz + 5 + 1] = s;
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+
+                if (this.surroundings[5][5][5] >= 0) {
+                    worldIn.setBlockState(pos, state.withProperty(CHECK_DECAY, Boolean.valueOf(false)), 4);
+                } else {
+                    this.destroy(worldIn, pos);
+                }
+                //this.surroundings = null;
+            }
+        }
+    }
+
+    private void destroy(World worldIn, BlockPos pos) {
+        this.dropBlockAsItem(worldIn, pos, worldIn.getBlockState(pos), 0);
+        worldIn.setBlockToAir(pos);
+    }
+
+    **
+     * Returns the quantity of items to drop on block destruction.
+     *
+    public int quantityDropped(Random random) {
+        return random.nextInt(20) == 0 ? 1 : 0;
+    }
+
+    **
+     * Get the Item that this Block should drop when harvested.
+     *
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
+        return Item.getItemFromBlock(Blocks.SAPLING);
+    }
+
+    **
+     * Spawns this Block's drops into the World as EntityItems.
+     *
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (!worldIn.isRemote) {
+            int i = this.getSaplingDropChance(state);
+
+            if (fortune > 0) {
+                i -= 2 << fortune;
+
+                if (i < 10) {
+                    i = 10;
+                }
+            }
+
+            if (worldIn.rand.nextInt(i) == 0) {
+                Item item = this.getItemDropped(state, worldIn.rand, fortune);
+                spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
+            }
+
+            i = 200;
+
+            if (fortune > 0) {
+                i -= 10 << fortune;
+
+                if (i < 40) {
+                    i = 40;
+                }
+            }
+
+            this.dropApple(worldIn, pos, state, i);
+        }
+    }
+
+    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {
+    }
+
+    protected int getSaplingDropChance(IBlockState state) {
+        return 20;
+    }
+
+    **
+     * Used to determine ambient occlusion and culling when rebuilding chunks for render
+     *
+    public boolean isOpaqueCube(IBlockState state) {
+        return !this.leavesFancy;
+    }
+
+    public boolean causesSuffocation(IBlockState p_176214_1_) {
+        return false;
+    }
+
+    public abstract BlockPlanks.EnumType getWoodType(int meta);
+}
+*/
